generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Neighborhood {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String?  @db.VarChar(255)
    description   String?  @db.Text
    internalNotes String?  @db.Text
    active        Boolean  @default(false)
    places        Place[]  @relation("PlaceToNeighborhood")
}

model Place {
    id              Int            @id @default(autoincrement())
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    name            String?        @db.VarChar(255)
    address1        String?        @db.VarChar(255)
    address2        String?        @db.VarChar(255)
    city            String?        @default("San Francisco") @db.VarChar(255)
    zip5            String?        @db.VarChar(5)
    phone           String?        @db.VarChar(25)
    description     String?        @db.Text
    longDescription String?        @db.Text
    internalNotes   String?        @db.Text
    active          Boolean        @default(false)
    lat             Float?
    lng             Float?
    slug            String         @unique @db.VarChar(255)
    url             String?        @db.Text
    hoursText       String?        @db.VarChar(255)
    traits          Trait[]        @relation("PlaceToTrait")
    neighborhoods   Neighborhood[] @relation("PlaceToNeighborhood")
    placetypes      PlaceType[]    @relation("PlaceToPlaceType")
}

model PlaceType {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String?  @db.VarChar(255)
    description   String?  @db.Text
    internalNotes String?  @db.Text
    active        Boolean  @default(false)
    places        Place[]  @relation("PlaceToPlaceType")
}

model Trait {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String   @unique @db.VarChar(255)
    description   String?  @db.Text
    internalNotes String?  @db.Text
    active        Boolean  @default(true)
    exclude       Boolean  @default(false)
    places        Place[]  @relation("PlaceToTrait")
}

// Better Auth tables

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]

    @@unique([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

// Better Auth tables
